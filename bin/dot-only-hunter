#!/bin/sh

# List of keywords that will be hunted if they are found preceding `.only`
prey="it,describe,suite,test,st"

# Directory for tests
test_dir="test"

usage () {
  echo "Usage: dot-only-hunter [test_dir][options]"
  echo "  -h, --help            output usage information"
  echo "  -p, --prey <list>     additional commma-separated list of names to hunt preciding .only"
  exit 1
}

parse_cmd_args () {
  while [ $# -gt 0 ]; do
    key="$1"
    case $key in
      -p|--prey)
        if [ -z "$2" ]; then
          echo "'prey' option requires a comma-joined list as an argument" >&2
          exit 1
        fi
        prey="$prey,$2"
        shift
        ;;
      -h|--help)
        usage
        ;;
      *)
        test_dir="$key"
        ;;
    esac
    shift
  done
}

main () {
  if ! [ -e "$test_dir" ]; then
    echo "dot-only-hunter: $test_dir: No such file or directory" >&2
    exit 1
  fi

  # Prepare OR for grep regex
  prey=$(echo "$prey" | sed "s/,/\\\|/g")

  echo "Hunting inside '$test_dir' for tests with \`.only\`..."

  grep_recursive_flag="-R"
  echo "" | grep -Rq "test" > /dev/null 2>&1
  if [[ $? -gt 1 ]] ; then
    grep_recursive_flag="-r"
  fi

  grep -n ${grep_recursive_flag} "\($prey\)\.only" "$test_dir"
  rc=$?
  if [[ $rc -eq 0 ]]; then
    echo "Whoops! Found \`.only\` in your tests."
    exit 1
  elif [[ $rc -gt 1 ]] ; then
    echo "Error searching for\`.only\` in your tests. This system may be incompatible."
    exit 1
  else
    echo "All good!"
  fi

}

parse_cmd_args "$@"
main
